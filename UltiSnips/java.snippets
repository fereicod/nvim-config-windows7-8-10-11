snippet Class "JavaClass"
${3}

public class $1 {

	public $1() {
		${2}
	}
}
endsnippet
snippet MainClass "JavaMainClass"
${3}

public class $1 {

	public $1() {
		${2}
	}

	public static void main(String[] args) {
		$1 instance = new $1();
	}
}
endsnippet
snippet ClassOop "JavaClassOop"

/*
  Utility
*/
public class $1 {
	${2}

	public $1($3) {
		${4}
	}
	
	${5}
}
endsnippet

snippet pr
private ${0}
endsnippet
snippet po
protected ${0}
endsnippet
snippet pu
public ${0}
endsnippet

## Annotations
snippet before
@Before
static void ${1:intercept}(${2:args}) { ${0} }
endsnippet
snippet mm
@ManyToMany
${0}
endsnippet
snippet mo
@ManyToOne
${0}
endsnippet
snippet om
@OneToMany${1:(cascade=CascadeType.ALL)}
${0}
endsnippet

## Methods for data entry
snippet nexI
sc.nextInt();$1
endsnippet
snippet nexF
sc.nextFloat();$1
endsnippet
snippet nexS
sc.nextLine();$1
endsnippet
snippet nexD
sc.nextDouble();$1
endsnippet
snippet nexC
sc.next().charAt(0);$1
endsnippet
snippet nexB
sc.nextByte();$1
endsnippet
snippet nexH
sc.nextShort();$1
endsnippet
snippet nexL
sc.nextLong();$1
endsnippet

## Arrangement
snippet arr
int[] arr = new int[$1];
$2
endsnippet

## Basic Java packages and import
snippet ijb
import java.beans.$1;
endsnippet
snippet iji
import java.io.$1;
endsnippet
snippet ijm
import java.math.$1;
endsnippet
snippet ijxs
import javax.swing.$1;
endsnippet
snippet iju
import java.util.$1;
endsnippet

## Class
snippet pcl
public class ${1:`vim_snippets#Filename("$1", "untitled")`} ${0}
endsnippet
snippet in
interface ${1:`vim_snippets#Filename("$1", "untitled")`} ${2:extends Parent}
endsnippet
snippet pce
public class ${1:`vim_snippets#Filename("$1")`} extends ${0:TestCase}
endsnippet

## Class Enhancements
snippet ext
extends ${0}
endsnippet
snippet imp
implements ${0}
endsnippet
snippet abs
abstract ${0}
endsnippet
snippet int
interface ${0}
endsnippet

## Comments
snippet /*
/*
 * @author Josu√© Romero
 * @date () COL
*/
endsnippet

## Constants
snippet co
static public final ${1:String} ${2:var} = ${3};
endsnippet
snippet cos
static public final String ${1:var} = "${2}";
endsnippet

## Control Statements
snippet case
case ${1}:
	${0}
endsnippet
snippet def
default:
	${0}
endsnippet
snippet el
else
endsnippet
snippet eif
else if (${1}) ${0}
endsnippet
snippet if
if (${1}) ${0}
endsnippet
snippet sw
switch (${1}) {
	${0}
}
endsnippet

## Create a Method
snippet m
${1:void} ${2:method}(${3}) ${4:throws }
endsnippet

## Create a Variable
snippet v
${1:String} ${2:var}${3: = null}${4};
endsnippet

## Declaration for ArrayList
snippet d.al
List<${1:Object}> ${2:list} = new ArrayList<$1>();${0}
endsnippet
## Declaration for HashMap
snippet d.hm
Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();${0}
endsnippet
## Declaration for HashSet
snippet d.hs
Set<${1:Object}> ${2:set} = new HashSet<$1>();${0}
endsnippet
## Declaration for Stack
snippet d.st
Stack<${1:Object}> ${2:stack} = new Stack<$1>();${0}
endsnippet

## Singleton Pattern
snippet singlet
private static class Holder {
	private static final ${1:`vim_snippets#Filename("$1")`} INSTANCE = new $1();
}

private $1() { }

public static $1 getInstance() {
	return Holder.INSTANCE;
}
endsnippet

## Enhancements to Methods, variables, classes, etc.
snippet ab
abstract ${0}
endsnippet
snippet fi
final ${0}
endsnippet
snippet st
static ${0}
endsnippet
snippet sy
synchronized ${0}
endsnippet

## Error Methods
snippet err
System.err.print("${0:Message}");
endsnippet
snippet errln
System.err.println("${0:Message}");
endsnippet
snippet errf
System.err.printf("${1:Message}", ${0:exception});
endsnippet

## Exception Handling
snippet as
assert ${1:test} : "${2:Failure message}";
endsnippet
snippet ae
assertEquals("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet aae
assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
endsnippet
snippet af
assertFalse("${1:Failure message}", ${2:condition});
endsnippet
snippet at
assertTrue("${1:Failure message}", ${2:condition});
endsnippet
snippet an
assertNull("${1:Failure message}", ${2:object});
endsnippet
snippet ann
assertNotNull("${1:Failure message}", ${2:object});
endsnippet
snippet ass
assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet asns
assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet fa
fail("${1:Failure message}");
endsnippet
snippet ca
catch(${1:Exception} ${2:e}) ${0}
endsnippet
snippet thr
throw ${0}
endsnippet
snippet ths
throws ${0}
endsnippet
snippet try
try {
	${0:${VISUAL}}
} catch(${1:Exception} ${2:e}) {
}
endsnippet
snippet tryf
try {
	${0:${VISUAL}}
} catch(${1:Exception} ${2:e}) {
} finally {
}
endsnippet

## Find Methods
snippet findall
List<${1:listName}> ${2:items} = $1.findAll();
endsnippet
snippet findbyid
${1:var} ${2:item} = $1.findById(${3});
endsnippet

## Javadocs
snippet @au
@author `system("grep \`id -un\` /etc/passwd | cut -d \":\" -f5 | cut -d \",\" -f1")`
endsnippet
snippet @br
@brief ${0:Description}
endsnippet
snippet @fi
@file ${0:`vim_snippets#Filename("$1")`}.java
endsnippet
snippet @pa
@param ${0:param}
endsnippet
snippet @da
@date ${0:date}
endsnippet
snippet @re
@return ${0:param}
endsnippet

## Logger Methods
snippet debug
Logger.debug(${1:param});
endsnippet
snippet error
Logger.error(${1:param});
endsnippet
snippet info
Logger.info(${1:param});
endsnippet
snippet warn
Logger.warn(${1:param});
endsnippet

## Loops
snippet for
for (${1}; ${2}; ${3}) {
	${4}
}
endsnippet
snippet fori "for (int i = 0; i < $1.length; i++) {body}"
for (int i = 0; i < $1.length; i++) {
	${2}
}
endsnippet
snippet wh
while ($1) {
	$2
}
endsnippet

## Main method
snippet psvm
public static void main (String[] args) {
	${0}
}
endsnippet
snippet main
public static void main(String[] args) {
	${0}
}
endsnippet

## Print Methods
snippet s
System.out.print("${0}");
endsnippet
snippet ss
System.out.println("${0}");
endsnippet
snippet print
System.out.println("${0:Message}");
endsnippet
snippet printf
System.out.printf("${1:Message}", ${0:args});
endsnippet
snippet printlna
System.out.println("$0: " + Arrays.toString($1));
endsnippet

## Render Methods
snippet ren
render(${1:param});
endsnippet
snippet rena
renderArgs.put("${1}", ${2});
endsnippet
snippet renb
renderBinary(${1:param});
endsnippet
snippet renj
renderJSON(${1:param});
endsnippet
snippet renx
renderXml(${1:param});
endsnippet

## Setter and Getter Methods
snippet set
${1:public} void set${3:}(${2:String} ${0:}){
	this.$4 = $4;
}
endsnippet
snippet get
${1:public} ${2:String} get${3:}(){
	return this.${0:};
}
endsnippet

## Terminate Methods or Loops
snippet ca
case $1: $2
endsnippet
snippet re
return ${0}
endsnippet
snippet br
break;
endsnippet

## Test Methods
snippet psi "public static int nameMethod() {body}"
public static int ${1:nameMethod}() {
	$2
	return ${3:1};
}
endsnippet
snippet pss "public static String nameMethod() {body}"
public static String ${1:nameMethod}() {
	$2
	return ${3:"result"};
}
endsnippet
snippet ps "public static {datatype} nameMethod() {body}"
public static $1 ${2:nameMethod}() {
	$3
	return ${3:0};
}
endsnippet
snippet psv "public static void nameMethod() {body}"
public static void ${1:nameMethod}() {
	$2
}
endsnippet
snippet t
public void test${1:Name}() throws Exception {
	${0}
}
endsnippet
snippet test
@Test
public void test${1:Name}() throws Exception {
	${0}
}
endsnippet

## Utils
snippet sc "Scanner sc = new Scanner(System.in);"
Scanner sc = new Scanner(System.in);
$1
endsnippet
snippet arrto "Arrays.toString(arreglo)"
Arrays.toString($1)
endsnippet
snippet ins "new instance"
$1 $2 = new $1($3);
$4
endsnippet

## Miscellaneous
snippet action
public static void ${1:index}(${2:args}) { ${0} }
endsnippet
snippet rnf
notFound(${1:param});
endsnippet
snippet rnfin
notFoundIfNull(${1:param});
endsnippet
snippet rr
redirect(${1:param});
endsnippet
snippet ru
unauthorized(${1:param});
endsnippet
snippet unless
(unless=${1:param});
endsnippet
